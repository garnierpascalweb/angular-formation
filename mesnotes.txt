ng new mon-projet-angular --style=scss --skip-tests=true
npm install bootstrap@3.3.7 --save
ng generate component mon-premier

16:45 Interpolation - integrer une donnée du typescript dans le template {{}}
ng generate component appareil

22:00 Liaison de properiété (properties binding) - avec des crochets [] pour lier a la propriété

26:30 Liaison par evenement (event binding) - avec des parentheses pour reagir a l'evenement

En resume:
Interpolation et liaison par propriété : du typeScript vers le template
Liaison par evenement : reégir aux action du template dans le typescript

29:20 two ways bindings : ajout de forms module (input)

32:00 - liaison de données - commuication typescript / HTML - 
37:00 Les directives
37:00 a 44:15 - Directives structurelles - ngIf, ngFor (structurer le document selon certaines conditions choisies)
44:15 a 50:15 - Directives par attribut - ngClass, ngStyle - Modifie le comportement des components dans le DOM
50:30 : les pipes pour modifier l'affichage des données (date, uppercase)
55:00 a 58:00 le pipe async TRES IMPORTANT

Les services (centraliser du code) - 
3 niveaux d'injection
  - appModule (dispo pour tous les components et autres services)
  - appComponent (dispo pour tous les components de l'application, mais pas les autres servuices)
  - niveau component 
Les services doivent etre 
 - ajoutés dans app.module.ts, bloc 'providers' !
 - injectes dans des composants par le constructeurs de la forme private authService : AuthService
 - injectés dans d'autres services par le decorateur @Injectable() de la forme 
  - les attributs d'un service devraient etre private et le service devrait exposer un subject

1:16:00 Le routing

1:18:45 a 1:20:30 le routing - creation des routes
1:20:30 1:22:15 - routing: integration des routes 
<router-outlet></router-outlet> , RouterModule.forRoot (appRoutes)
a integrer dans app.module.ts

1:22:15 1:26:00 - routing: integration des routes par creation dune navbar
<a routerLink="auth">, <li routerLinkActive="active">

1:26:00 1:32:30 - routing: authentification: service d'authentification et mire de login
creation du service fake d'authentification jusqua 1:28:50
creation de al mire de login apres 1:28:50
1:32:30 1:34:15 - routing: authentification: navigation programmatique
injection du router dans le component via le constructeurs : constructor(private authService : AuthService, private router: Router) 
utilisation de la methode navigate :  this.router.navigate(['appareils']);
1:34:15 1:45:00 - routing: routes parametrees
ajout d'une route parametree : appareils/:id
injection de ActivatedRoute pour recuperation des parametres de lurl (1:38:30) et recuperation avec snapshot et params (1:39:00)
utilisation de find sur les tableaux pour recherche dans un json (1:40:45)
utilisation dun +id pour cast en integer (1:41:45)

1:45:00 1:48:00 - routing : la redirection
creation dun composant dedié aux erreurs 404
illustration de path contenant des wild card '**' obligatoirement à la fin ! (1:46:30)

1:48:00 1:54:00  - routing : les gardes 
creation d'un service AuthGuard
decorateur @Injectable pour injecter un service dans un autre service (1:50:10)
notion de CanActivate (1:49:00) dans le service guard et attribut canActivate dans la const des routes (1:52:30)

1:54:00 2:08:00 - rxjs (Observable, Souscription, Subject)
Observable : objet qui emet des informations dans le temps (champ de texte, download, requete http)

1:59:00 objets Suscription bonne pratique
2:01:00 interface OnDestroy et unsuscribe();
2:01:30 objets Subject

2:08:00 - Gestion des donnees utilisateurs et serveurs
Les formulaires (methode template, methode reactive)
2:09:15 methode template (objet formulaire NgForm) : 
  creation d'un formulaire
	2:15:30 valmidation ddes donnees
	2:17:00 forcer une valeur par defaut dans une liste deroulante en se liant à ngModel
	2:18:00 exploiter des donnees
2:22:30 preparation du terrain en vue du mode reactive : creation modele, service User
  modele User : constructeur avec des arguments public pour ne pas declarer les attributs, le ? pour facultatif...
  bon rappel sur les bonnes pratiques de service / componennt
2:34:00 implementation methode reactive (objet formulaire FormGroup), ajout de ReactiveFormsModule dans les imports
2:44:00 utiliser les validators
on peut creer ses propres validators, surement en implementant une interface : a regarder
2:48:00 a 2:54:15 FormArray incomprehensible et non codé 

2:55:00 les requetes http (HttpClient)
HttpClientModule a ajouter au tableau des imports
2:55:00 2:57:00 Firebase
2:57:00 03:02:40 faire un put
03:02:40         faire un get
   03:04:00 cast du type lors d'un get



routerLink a la place de a href
RXJS